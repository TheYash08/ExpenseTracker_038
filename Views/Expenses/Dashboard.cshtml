@model IEnumerable<ExpenseTracker.Models.CategorySummary>

@{
    ViewData["Title"] = "Dashboard";
    var monthlyTotal = (double)ViewBag.MonthlyTotal;
    var transactionCount = (int)ViewBag.TransactionCount;
    var currentMonth = (string)ViewBag.CurrentMonth;
}

<div class="row mb-4">
    <div class="col-md-12">
        <h2><i class="fas fa-chart-line me-2"></i>Dashboard</h2>
        <p class="text-muted">Overview of your expenses for @currentMonth</p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%); color: white;">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <h6 class="text-muted mb-1">Monthly Total</h6>
            <h3 class="mb-0 fw-bold">₹@monthlyTotal.ToString("N2")</h3>
        </div>
    </div>
    <div class="col-md-4">
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white;">
                <i class="fas fa-receipt"></i>
            </div>
            <h6 class="text-muted mb-1">Transactions</h6>
            <h3 class="mb-0 fw-bold">@transactionCount</h3>
        </div>
    </div>
    <div class="col-md-4">
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white;">
                <i class="fas fa-calendar-day"></i>
            </div>
            <h6 class="text-muted mb-1">Daily Average</h6>
            <h3 class="mb-0 fw-bold">₹@((monthlyTotal / DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)).ToString("N2"))</h3>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-4"><i class="fas fa-chart-pie me-2"></i>Expenses by Category</h5>
                <canvas id="categoryChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-4"><i class="fas fa-list-ul me-2"></i>Category Breakdown</h5>
                @if (Model.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var category in Model)
                        {
                            var percentage = monthlyTotal > 0 ? ((double)category.TotalAmount / monthlyTotal) * 100.0 : 0.0;

                            <div class="list-group-item border-0 px-0">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-bold">@category.Category</span>
                                    <span class="badge bg-primary">@category.Count transactions</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="text-danger fw-bold">₹@category.TotalAmount.ToString("N2")</span>
                                    <span class="text-muted">@percentage.ToString("N1")%</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" role="progressbar" style="width: @percentage%" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No expenses this month</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-4"><i class="fas fa-chart-line me-2"></i>Monthly Trend (Last 6 Months)</h5>
                <canvas id="trendChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.3.0/chart.umd.min.js"></script>
    <script>
        // Category Chart
        const categoryData = @Html.Raw(Json.Serialize(Model.Select(c => new { c.Category, c.TotalAmount })));
        
        const categoryCtx = document.getElementById('categoryChart');
        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: categoryData.map(c => c.category),
                datasets: [{
                    data: categoryData.map(c => c.totalAmount),
                    backgroundColor: [
                        '#4f46e5', '#7c3aed', '#10b981', '#f59e0b',
                        '#ef4444', '#06b6d4', '#8b5cf6', '#ec4899',
                        '#14b8a6', '#f97316'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            font: { size: 12 }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.label + ': ₹' + context.parsed.toFixed(2);
                            }
                        }
                    }
                }
            }
        });

        // Trend Chart
        const trendData = @Html.Raw(Json.Serialize(ViewBag.MonthlySummary));
        
        const trendCtx = document.getElementById('trendChart');
        new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: trendData.map(m => {
                    const date = new Date(m.month);
                    return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
                }),
                datasets: [{
                    label: 'Monthly Expenses',
                    data: trendData.map(m => m.total),
                    borderColor: '#4f46e5',
                    backgroundColor: 'rgba(79, 70, 229, 0.1)',
                    tension: 0.4,
                    fill: true,
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    pointBackgroundColor: '#4f46e5',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Total: ₹' + context.parsed.y.toFixed(2);
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '₹' + value.toFixed(0);
                            }
                        }
                    }
                }
            }
        });
    </script>
}